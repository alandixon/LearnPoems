using LearnPoems.Logging;
using LearnPoems.Text;
using LearnPoems.Version;
using System.ComponentModel;
using System.IO;
using Xamarin.Forms;
using Xamarin.Forms.PlatformConfiguration;

namespace LearnPoems.Model
{
    public class Model : INotifyPropertyChanged
    {
        #region Logging
        private ILog Log = DependencyService.Get<ILog>();
        private string logTag = typeof(Model).FullName;
        #endregion Logging

        #region Versioning
        private IVersion version = DependencyService.Get<IVersion>();
        #endregion Versioning

        public Model()
        {
            Initialise();
        }

        public string AppName
        {
            get { return App.AppName; }
        }

        /// <summary> Google version name (not version number/code), generated by the droid project from the manifest </summary>
        public string AppVersionName
        {
            get { return version.VersionName; }
        }

        public string CopyrightText
        {
            get { return HelpPageText.Copyright; }
        }

        public string CreditText
        {
            get { return HelpPageText.Credits; }
        }

        private void Initialise()
        {
            try
            {
                // Get system folder
                //string rootFolder = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ApplicationData); // /data/user/0/org.alandixon.LearnPoems/files/.config
                //string rootFolder = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData); // /data/user/0/org.alandixon.LearnPoems/files/.local/share
                App.SystemFolderPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.ApplicationData);
                // Get settings
                // Get poem folder
                App.PoemFolderPath = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);
            }
            catch (System.Exception ex)
            {
                Log.Error(logTag, string.Format("Initialise() failed: {0}", ex.Message));
            }
        }




        #region INotifyPropertyChanged

        public event PropertyChangedEventHandler PropertyChanged;

        public void NotifyPropertyChanged(string propName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        #endregion INotifyPropertyChanged
    }
}
